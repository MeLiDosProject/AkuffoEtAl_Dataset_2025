---
title: "Descriptive analysis"
author: "Johannes Zauner"
format: 
  html:
    self-contained: true
    code-tools: true
---

## Overview

This is an work-in-progress descriptive analysis of the `AkuffoEtAl2025` dataset.

```{r}
#| label: setup
#| include: false
library(LightLogR)
library(glue)
library(tidyverse)
library(gt)
library(cowplot)
library(legendry)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
library(patchwork)
```

## Data import: wearable data

The first step is the import of wearable data from the `head` position (mounted on glasses).

```{r}
#| label: "general information"
#time zone of Kumasi
tz = "Africa/Accra"
#coordinates for Kumasi
coordinates <- c(6.6750074282377385, -1.572643823555129)
#regex to extract participant Id and wearing position
# pattern <- "[A-Z]+_S[0-9]{3}_[hcw]"
#regex to extract participant Id
pattern <- "[A-Z]+_S[0-9]{3}"

country_colors <- c(
  Sweden     = "#88CCEE",  # Sky blue
  Spain      = "#CC6677",  # Coral red
  Germany    = "#DDCC77",  # Mustard yellow
  Netherlands= "#117733",  # Dark green
  Turkey     = "#332288",  # Indigo
  Ghana      = "#AA4499",  # Purple-pink
  Costa_Rica = "#44AA99"   # Teal
)

```

```{r}
#path to participants
path_part1 <- "../data/raw/individual"
#path to actlumus data sans wearing position
path_part2 <- "/continuous/actlumus_"
#wearing position
wearing_position <- "head"
#getting all subfolders
folders <- dir(path_part1)
#creating complete folder names
paths <- glue("{path_part1}/{folders}{path_part2}{wearing_position}")
#collecting file names
files <- list.files(paths, pattern = "[0-9]\\.txt$", full.names = TRUE)
```

```{r}
data <- import$ActLumus(files, tz, auto.id = pattern)
```

## Regularizing data

```{r}
#| fig-height: 15
#| fig-width: 5
data |> has_gaps()
data |> has_irregulars()
data |> gg_gaps(group.by.days = TRUE, show.irregulars = TRUE, full.days = FALSE)
```

Apparently, `KNUST_S003`, `KNUST_S004`, and `KNUST_S005` suffer from some kind of defect, where the data become irregular and show values around 10^4 lx, even at night. We first bin the irregular data into the next regular interval, and then convert implicit to explicit days.

```{r}
#| fig-height: 15
#| fig-width: 5
data_cleaned <- 
data |> 
  aggregate_Datetime() |> #remove irregular data
  gap_handler(full.days = TRUE) #remove implicit gaps

data_cleaned |> has_gaps() #no more implicit gaps
data_cleaned |> has_irregulars() #no more irregular data
data_cleaned |> gap_table()
```

# Dealing with measurement spikes

Measurement spikes seem to happen at random during certain periods of time. We can capture those by treating them as clusters of at maximum 2 epochs length. The next step visualizes this approach for `KNUST_S005`.

```{r}
#| fig-height: 12
#| fig-width: 8
data_cleaned |> 
  filter(Id == "KNUST_S005") |> 
  add_clusters(MEDI > 2000 & MEDI < 30000, 
                   cluster.duration = "20 secs", 
                   duration.type = "max") |>  
  gg_day(geom = "line") |> 
  gg_photoperiod(coordinates) +
  geom_point(data = \(x) filter(x, !is.na(state)), col = "red") +
  labs(title = "Identification of sudden measurement spikes (red dots)")
```

We assess how many there are across the participants:

```{r}
data_cleaned |> 
  extract_clusters(MEDI > 2000 & MEDI < 30000, 
                   cluster.duration = "20 secs", 
                   duration.type = "max",
                   add.label = TRUE) |> 
  group_by(label, Id) |> 
  summarize_numeric() |> 
  select(Id, label, episodes) |> 
  group_by(label) |> 
  gt() |> 
  tab_header("Measurement spikes")
```

Spikes are detected for every Id. We will not remove the data, but rather replace them with the value 2 intervals prior. This ensures plausible values for that time and avoids that a spike is copied over.

```{r}
#| fig-height: 6
#| fig-width: 12
#| warning: false
data_cleaned <-
  data_cleaned |>
  add_clusters(MEDI > 2000 & MEDI < 30000,
               cluster.duration = "20 secs",
               duration.type = "max") |>
  mutate(MEDI =
           ifelse(!is.na(state), lag(MEDI, 2), MEDI))

data_cleaned |> 
  filter(Id %in% c("KNUST_S003", "KNUST_S004", "KNUST_S005")) |> 
  gg_days()
```

These data now look sensible enough for further visualization and processing.

## Visualization

### Overview

```{r}
#| warning: false
P_overview <-
  data |>
  mutate(Id = 
           fct_relabel(Id, \(x) str_remove(x, "KNUST_")) |> fct_rev()
         ) |> 
  gg_overview(col = "Ghana") +
  labs(x = "Month") +
  scale_x_datetime(date_labels = "%b %Y") +
  scale_color_manual(values = country_colors) + 
  guides(colour = "none") +
  labs(y = "ID")
```

### Photoperiod

```{r}
#| warning: false
limits <- 
photoperiod(coordinates,  
            seq(from = as_date("2024-01-01"),
                to = as_date("2024-12-31"), 
                by = 1),
            tz = tz
            ) |> pull(photoperiod)

photoperiods <- 
  photoperiod(coordinates,  
            data |> 
              add_Date_col(group.by = TRUE) |> 
              summarize(.groups = "drop") |> 
              pull(Date),
            tz = tz
            )

axis_name <- 
  glue("Possible and <b style = 'color:{country_colors['Ghana']}'>actual</b> photoperiod (hours) at {round(coordinates[1], 1)}° N, {abs(round(coordinates[2], 1))}°W")

# photoperiod_bracket_name <- 
#   glue("Possible photoperiod (hours) at {round(coordinates[1], 1)}° N, {abs(round(coordinates[2], 1))}°W")

# photoperiod_max_bracket <- primitive_bracket(
#   # Keys determine what is displayed
#   key = key_range_manual(start = min(limits)-1/60, 
#                          end = max(limits)+1/60, 
#                          name = photoperiod_bracket_name),
#   bracket = "line"
# )

# photoperiod_bracket <- primitive_bracket(
#   # Keys determine what is displayed
#   key = key_range_manual(start = min(photoperiods$photoperiod)-1/60, 
#                          end = max(photoperiods$photoperiod), 
#                          name = "Study range", color = country_colors["Ghana"]),
#   bracket = matrix(NA, ncol = 2, nrow = 2)
# )

P_photoperiod <-
photoperiods |> 
  ggplot(aes(x=photoperiod)) +
  geom_boxplot(aes(y= -1, col = "Ghana"), ) +
  geom_histogram(binwidth = 2/60, 
                 alpha = 0.25, 
                 aes(fill = "a"),
                 data = tibble(photoperiod = limits)) +
  geom_histogram(binwidth = 2/60, aes(fill = "Ghana")) +
  scale_x_continuous(breaks = seq(12.5, 13.3, by = 0.1)) +
  scale_color_manual(values = country_colors) + 
  scale_fill_manual(values = country_colors) + 
  labs( 
       y = "Number of days", 
       x = axis_name) +
  theme_cowplot() +
  guides(
    # x = guide_axis_stack("axis", photoperiod_bracket, photoperiod_max_bracket),
         fill = "none", color = "none") +
  coord_cartesian(ylim = c(-1,30), xlim = c(12.5, 13.27)) +
  theme(axis.title.x = ggtext::element_markdown())
```

## Worldmap

```{r}
#| warning: false
# load worldmap
world <- ne_countries(scale = "medium", returnclass = "sf")

# countries and their colors
countries_colors <- tibble(
  country = "Ghana",
  color = country_colors[country],
  stringsAsFactors = FALSE
)

# Coordinates of countries capitals
capitals_info <- tibble(
  country = "Ghana",
  capital = "Kumasi",
  lat = coordinates[1],
  lon = coordinates[2],
  color = "Ghana",
  stringsAsFactors = FALSE
)

capitals_info <- 
  capitals_info %>% 
  mutate(
    label = 
      paste0(capital, ", ", country, " (", 
             lat |> abs() %>% round(1), "° N, ", lon |> abs() %>% round(1), "° W)")
  )

# Worldmap
world$color <- ifelse(world$name %in% countries_colors$country, countries_colors$country[match(world$name, countries_colors$country)], NA)

# Capitals as 'sf' Object
capitals <- st_as_sf(capitals_info, coords = c("lon", "lat"), crs = st_crs(world))

# bring everyting together
P_map <-
ggplot() +
  geom_sf(data = world, aes(fill = color), color = NA, size = 0.25, alpha = 0.5, show.legend = FALSE) + # Colors with transparancy
  geom_sf(data = capitals, aes(fill = color), shape = 21, color = "black", size = 3, stroke = 0.2) + # Dots for capitals
  geom_sf_label(
    data = capitals,
    aes(label = capitals_info$label, lat = geometry$y, lon = geometry$x, fill = color),
    nudge_y = 12,
    size = 3,
    alpha = 0.75,
    box.padding = 0.35,
    point.padding = 0.5,
    segment.color = 'grey50'
  ) + # Capitals
  scale_fill_manual(values = country_colors) +
  theme_void() +
  theme(legend.position = "none") + # No legend
  labs(x=NULL, y = NULL)
```

## Average day

```{r}
Brown_bracket <- primitive_bracket(
  # Keys determine what is displayed
  key = key_range_manual(start = c(0, 1.0001,250), 
                         end = c(1, 10, Inf), 
                         name = c("sleep", "evening", "daytime")),
  bracket = "square",
  theme = theme(
    legend.text = element_text(angle = 90, hjust = 0.5),
    axis.text.y.left = element_text(angle = 90, hjust = 0.5)
  )
)

P_average <-
data_cleaned |> 
  ungroup() |> 
  select(Datetime, MEDI) |> 
  aggregate_Date(
    unit = "15 mins",
    numeric.handler = \(x) median(x, na.rm = TRUE),
    upper95 = quantile(MEDI, 0.975, na.rm = TRUE),
    upper75 = quantile(MEDI, 0.875, na.rm = TRUE),
    upper50 = quantile(MEDI, 0.75, na.rm = TRUE),
    lower50 = quantile(MEDI, 0.125, na.rm = TRUE),
    lower75 = quantile(MEDI, 0.25, na.rm = TRUE),
    lower95= quantile(MEDI, 0.025, na.rm = TRUE)
  ) |> 
  add_photoperiod(coordinates) |> 
  gg_doubleplot(geom = "blank", 
                facetting = FALSE, 
                jco_col = FALSE,
                x.axis.label = "Local time (HH:MM)",
                y.axis.label = "Melanopic EDI (lx)") |> 
  gg_photoperiod() +
  geom_ribbon(aes(ymin = lower95, ymax = upper95, fill = "Ghana"), alpha = 0.4) +
  geom_ribbon(aes(ymin = lower75, ymax = upper75, fill = "Ghana"), alpha = 0.4) +
  geom_ribbon(aes(ymin = lower50, ymax = upper50, fill = "Ghana"), alpha = 0.4) +
  geom_line(aes(y = MEDI)) +
  map(c(1,10,250), 
      \(x) geom_hline(aes(yintercept = x), col = "grey", linetype = "dashed")
      ) +
  scale_fill_manual(values = country_colors) +
  coord_cartesian(ylim = c(0, 100000)) +
  guides(fill = "none", y = guide_axis_stack(Brown_bracket, "axis")) +
  # labs(x = NULL)
  labs(
    caption = glue(
      "<i>daytime</i>, <i>evening</i>, and <i>sleep</i> indicate recommendations for healthy light exposure (Brown et al., 2022). <b>Median</b> with <b style = 'color:{alpha(country_colors['Ghana'], alpha = 0.9)}'>50%</b>, <b style = 'color:{alpha(country_colors['Ghana'], alpha = 0.7)}'>75%</b>, or <b style = 'color:{alpha(country_colors['Ghana'], alpha = 0.5)}'>95%</b> of data."
    )
    ) +
  theme(plot.caption = ggtext::element_markdown())
```

## Combining plots

```{r}
#| warning: false
#| fig-height: 8
#| fig-width: 10
(P_map + P_overview) / 
  (P_photoperiod + P_average + plot_layout(widths = c(1, 2))) +
  plot_annotation(tag_levels = 'A') +
  plot_layout(guides = "collect", heights = c(1.4,2)) &
  theme(axis.title = element_text(size = 10),
        axis.text = element_text(size = 10),
        plot.tag = element_text(size = 20, face = "plain")) 

ggsave("../output/figures/Figure_1.png", width = 17, height = 10, scale = 2, units = "cm")
```

## Wrist and chest data

Next we import data from wrist